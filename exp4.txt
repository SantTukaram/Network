from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives.asymmetric.utils import (
    encode_dss_signature,
    decode_dss_signature
)
from cryptography.hazmat.primitives.serialization import (
    load_pem_public_key,
    load_pem_private_key,
    load_ssh_public_key,
    load_ssh_private_key,
    Encoding,
    PrivateFormat,
    PublicFormat,
    NoEncryption
)

# Symmetric Cryptography - Fernet (AES encryption)
def symmetric_encrypt(plaintext, key):
    cipher_suite = Fernet(key)
    ciphertext = cipher_suite.encrypt(plaintext)
    return ciphertext

def symmetric_decrypt(ciphertext, key):
    cipher_suite = Fernet(key)
    plaintext = cipher_suite.decrypt(ciphertext)
    return plaintext

# Generate a symmetric key
symmetric_key = Fernet.generate_key()

# Example usage of symmetric encryption and decryption
plaintext = b"Hello, symmetric cryptography!"
ciphertext = symmetric_encrypt(plaintext, symmetric_key)
decrypted_text = symmetric_decrypt(ciphertext, symmetric_key)

print("Symmetric Encryption:")
print("Plaintext:", plaintext)
print("Ciphertext:", ciphertext)
print("Decrypted Text:", decrypted_text)
print()


# Asymmetric Cryptography - RSA encryption
def asymmetric_encrypt(plaintext, public_key):
    ciphertext = public_key.encrypt(
        plaintext,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return ciphertext

def asymmetric_decrypt(ciphertext, private_key):
    plaintext = private_key.decrypt(
        ciphertext,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return plaintext

# Generate an RSA key pair
private_key = rsa.generate_private_key(
    public_exponent=65537,
    key_size=2048
)
public_key = private_key.public_key()

# Example usage of asymmetric encryption and decryption
plaintext = b"Hello, asymmetric cryptography!"
ciphertext = asymmetric_encrypt(plaintext, public_key)
decrypted_text = asymmetric_decrypt(ciphertext, private_key)

print("Asymmetric Encryption:")
print("Plaintext:", plaintext)
print("Ciphertext:", ciphertext)
print("Decrypted Text:", decrypted_text)
